<?php
/**
 *  商品Model
 *
 *  商品CURDModel
 * @author      zhangrg
 * @version     20150801
*/
namespace Models;

class PartnerSku extends CityModel
{

    //保存前数据
    public $sku;

    /* 验证 */
    public function validation()
    {
        $this->validate(new \Phalcon\Mvc\Model\Validator\StringLength(array(
            'field' => 'name',
            'max' => 100,
            'min' => 1,
            'messageMaximum' => '商品名称不能超过100个字符',
            'messageMinimum' => '商品名称不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'unit_id',
            'message' => '单位不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'unit_price',
            'message' => '价格不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'parent_category_id',
            'message' => '一级分类不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'category_id',
            'message' => '二级分类不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\Uniqueness(array(
            'field' => ['name','spec','category_id','parent_category_id','partner_id'],
            'message' => '商品已经存在！【名称、规格、一级分类、二级分类】相同'
        )));

        if ($this->validationHasFailed() == true) {
            return false;
        }
    }

    
    /* 添加日志 */
    public function afterCreate(){

        $data['partner_id'] = $this->partner_id;
        $p_name = $this->getModel('partner')->findById($this->partner_id)['contact_name'];
        $data['type'] = 'create';
        $data['table'] = 'partnerSku';
        $data['target_id'] = $this->id;
        $data['content'] = "".$p_name."添加了一个名为：<a href='partnersku/detail/$this->id'>".$this->name."</a>    的商品";
        $this->getModel('partnerOperateLog')->createLog($data); 
        //商品编码
        $this->sn = 'P'.sprintf('%03s',$this->partner_id).sprintf('%02s',$this->parent_category_id).sprintf('%03s',$this->parent_category_id).sprintf('%05s',$this->id);
        $this->save();
    }
    /* 添加前重置搜索字段 */
    public function beforeCreate(){

        //搜索字段,商品名+拼音+简拼
        // var_dump($this);exit;
        $str2py = new \Libs\StringToPinyin();
        $quanpin = $str2py->str2py($this->name);
        $jianpin = $str2py->str2py($this->name,false);
        $this->search_name= "{$this->name}|{$quanpin}|$jianpin";

    }
    /* 更新前重置搜索字段 */
    public function beforeUpdate(){
        $this->sku = $this->getModel('partnerSku')->findById($this->id);

        //搜索字段,商品名+拼音+简拼
        $str2py = new \Libs\StringToPinyin();
        $quanpin = $str2py->str2py($this->name);
        $jianpin = $str2py->str2py($this->name,false);
        $this->search_name= "{$this->name}|{$quanpin}|$jianpin";

    }

    
    //更新后写入日志
    public function afterUpdate(){
        $sid =$this->sku['id'];
        if (in_array($this->getSource(), self::$cacheTable))
            $this->cacheMetaData();

        $mess = '';
        //商品名称       
        if($this->name != $this->sku['name']){
            $mess.= '将商品名称:'.$this->sku['name'].'修改为'.$this->name.',';
        }

        //商品简介
        if($this->remark != $this->sku['remark']){
            $mess.= '将商品简介:'.$this->sku['remark'].'修改为'.$this->remark.',';   
        }
        
        //单价
        if($this->unit_price != $this->sku['unit_price']){
            $mess.= '将单价:'.$this->sku['unit_price'].'修改为'.$this->unit_price.',';   
        }

        //一级分类
        if($this->parent_category_id != $this->sku['parent_category_id']){
            $f_rcate = $this->getModel('category')->findById($this->sku['parent_category_id']);
            $f_rname = $f_rcate['name'];
            $f_cate = $this->getModel('category')->findById($this->parent_category_id);
            $f_cname = $f_cate['name'];
            $mess.= '将二级分类'.$f_rname.'修改为'.$f_cname.',';   
        }
        //二级分类
        if($this->category_id != $this->sku['category_id']){
            $f_rname = $this->getModel('category')->findById($this->sku['category_id']);
            $rname = $f_rname['name'];
            $f_cname = $this->getModel('category')->findById($this->category_id);
            $cname = $f_cname['name'];
            $mess.= '将二级分类'.$rname.'修改为'.$cname.',';   
        }

        //产地
        if($this->origin != $this->sku['origin']){
            $mess.= '将产地'.$this->sku['origin'].'修改为'.$this->origin.',';   
        }

        //规格
        if($this->spec != $this->sku['spec']){
            $mess.= '将规格'.$this->sku['spec'].'修改为'.$this->spec.',';   
        }

        //商品详细
        if($this->content != $this->sku['content']){
            $mess.= '将商品详细'.$this->sku['content'].'修改为'.$this->content.',';   
        }

        //单位
        if($this->unit_id != $this->sku['unit_id']){
            $rname = $this->getModel('dict')->findById($this->sku['unit_id'])['name'];
            $uname = $this->getModel('dict')->findById($this->unit_id)['name'];
            $mess.= '将单位'.$rname.'修改为'.$this->uname.',';   
        }

        //热销
        if($this->hot != $this->sku['hot']){
            $mess.= '将商品['.$this->name.']设为热销';   
        }

        //新品
        if($this->new != $this->sku['new']){
            $mess.= '将商品['.$this->name.']设为新品';   
        }
        
        //上下架
        //上架
        //print_r($this->sku);print_r($this->is_del);die;
        if(($this->sku['is_del'] == 1) && ($this->is_del == 0)){
            $mess.= '将商品['.$this->name.']进行了上架操作'; 
        }
        //下架
        if(($this->sku['is_del'] == 0) && ($this->is_del == 1)){
            $mess.= '将商品['.$this->name.']进行了下架操作'; 
        }
        $partner = $this->getModel('partner')->findById($this->partner_id);
        $p_name = $partner['contact_name'];
        $data['partner_id'] = $this->partner_id;
        $data['type'] = 'update';
        $data['table'] = 'partnerSku';
        $data['target_id'] = $sid;
        $data['content'] = "".$p_name."修改了一个ID为：<a href='partnersku/detail/$sid'>".$sid."</a>    的商品,".$mess;
        //print_r($data);die; 
        $this->getModel('partnerOperateLog')->createLog($data);
    }

    public function getList($where = ''){
        $strWhere = '';
        if(is_array($where)){
            foreach ($where as $key => $val) {
                $strWhere .= " and `$key`= '$val'";
            }
        }
        if(is_string($where))$strWhere .= " $where";
        $list = $this->find($strWhere);

        return count($list)?$list->toArray():[];
    }


    public function refreshSku($ids,$shopId,$userId){
        $order = "id desc";
        $condition = "is_del = 0";
        if(!is_array($ids) || empty($ids)){
            return  array();
        }
        $ids = implode(',',$ids);
        if($ids){
            $condition .= "  and id in ('".$ids."')";
        }
        //select字段
        $columns = ['id','name','remark','parent_category_id','category_id','unit_id','unit_price','unit_number','measure_id'];
        $list = $this->getModel('partnerSku')->find(array($condition,'order'=>$order,'columns'=>$columns))->toArray();
        if(empty($list) || !$list){
            return array();
        }
        $ykyj = $this->getModel('partnerSkuYkyj')->getYkyjListByShopId($shopId);
        $return = [];
        foreach ($list as $val) {
            //计数单位
            $unit = $this->dict($val['unit_id']);
            $val['unit_price'] = $ykyj[$val['id']] ? $ykyj[$val['id']] : $val['unit_price'];
            $val['unit_name'] = isset($unit['name']) ? $unit['name'] : '';
            unset($val['unit_id']);
            //计量单位
            $measure = $this->dict($val['measure_id']);
            $val['measure_name'] = isset($measure['name']) ? $measure['name'] : '';
            unset($val['measure_id']);
            //图片
            $val['pic_url'] = $this->img->getUrlById('partner_sku', $val['id']);
            //是否收藏
            $val['is_favored'] = $userId > 0 ? $this->getModel('userFavor')->count(['is_del=0 and user_id=' . $userId . ' and sku_id=' . $val['id']]) : 0;
            $return[] = $val;
        }
        return $return;
    }
    

}
