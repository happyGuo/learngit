<?php
namespace Models;

use Phalcon\Mvc\Model\Validator\Email as EmailValidator;

class Partner extends CityModel
{
    public function validation()
    {
        if (isset($this->mobile)) {
            $this->validate(new \Phalcon\Mvc\Model\Validator\StringLength(array(
                'field' => 'mobile',
                'max' => 11,
                'min' => 11,
                'messageMaximum' => '手机号不正确',
                'messageMinimum' => '手机号不正确'
            )));
        }

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'category',
            'message' => '分类不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'contact_name',
            'message' => '真实姓名不能为空'
        )));

        $this->validate(new \Phalcon\Mvc\Model\Validator\PresenceOf(array(
            'field' => 'company_name',
            'message' => '公司名称不能为空'
        )));

        if (isset($this->mobile)) {
            $this->validate(new \Phalcon\Mvc\Model\Validator\Regex(array(
                "field" => 'mobile',
                'pattern' => '/^0?(13[0-9]|15[012356789]|18[0-9]|14[57]|17[0-9])[0-9]{8}$/',
                'message' => '手机号无效'

            )));
        }

        $this->validate(new \Phalcon\Mvc\Model\Validator\Uniqueness(array(
            'field' => 'mobile',
            'message' => '手机号已占用'
        )));

        if (isset($this->bankcard) && !empty($this->bankcard)) {
            $this->validate(new \Phalcon\Mvc\Model\Validator\Regex(array(
                "field" => 'bankcard',
                'pattern' => '/^\d{1,}$/',
                'message' => '银行卡无效,请输入正确银行卡号'

            )));
        }

       /* if (isset($this->bankcard) && !empty($this->bankcard)) {
            $this->validate(new \Phalcon\Mvc\Model\Validator\StringLength(array(
                'field' => 'bankcard',
                'max' => 20,
                'min' => 12,
                'messageMaximum' => '银行卡输入长度有误',
                'messageMinimum' => '银行卡输入长度有误'
            )));
        } */

        if (isset($this->before_pwd)) {
            $this->validate(new \Phalcon\Mvc\Model\Validator\StringLength(array(
                'field' => 'before_pwd',
                'max' => 20,
                'min' => 6,
                'messageMaximum' => '密码太长',
                'messageMinimum' => '密码太短'
            )));
        }

        if ($this->validationHasFailed() == true) {
            return false;
        }
    }

    public function afterValidationOnCreate()
    {
        $this->pwd = $this->getDi()->getCrypt()->encryptBase64($this->before_pwd);
        unset($this->before_pwd);
    }

    public function afterValidationOnUpdate()
    {
        if (isset($this->before_pwd)) {
            $this->pwd = $this->getDi()->getCrypt()->encryptBase64($this->before_pwd);
            unset($this->before_pwd);
        }
    }
    /* 添加前重置搜索字段 */
    public function beforeCreate(){

        //搜索字段,商品名+拼音+简拼
        // var_dump($this);exit;
        $str2py = new \Libs\StringToPinyin();
        //$quanpin = $str2py->str2py($this->company_name);
        $jianpin = $str2py->str2py($this->company_name,false);
        //$this->pinyin= "{$this->company_name}|{$quanpin}|$jianpin";
        $this->pinyin = "$jianpin";
    }
    /* 更新前重置搜索字段 */
    public function beforeUpdate(){

        //搜索字段,商品名+拼音+简拼
        // var_dump($this);exit;
        $str2py = new \Libs\StringToPinyin();
        //$quanpin = $str2py->str2py($this->company_name);
        $jianpin = $str2py->str2py($this->company_name,false);
        //$this->pinyin = "{$this->company_name}|{$quanpin}|$jianpin";
        $this->pinyin = "$jianpin";
    }
}
