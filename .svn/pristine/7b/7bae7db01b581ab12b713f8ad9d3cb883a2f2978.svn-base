<?php
/**
 * Created by PhpStorm.
 * User: jiangzhuoran
 * Date: 2015/9/13
 * Time: 16:41
 */
namespace Modules\App\Controllers;

class BOrderController extends BAppController
{

    public function listAction()
    {
        $type = $this->request->getQuery('type','int',5);
        $limit = $this->request->getQuery('limit','int',10);
        $offset = $this->request->getQuery('offset','int',0);
        $partnerId = $this->userId;
        $condition = "is_del = 0 and partner_id = ".$partnerId;
        switch($type){
            case 1:
                $condition .= " and status = 0";
                break;
            case 2:
                $condition .= " and status = 1";
                break;
            case 3:
                $condition .= " and status >= 2";
                break;
            default:
        }
        $columns = ['id','order_id','subcontract','ctime','shop_id','pay_amount','order_sn','buy_amount','status','platform'];
        $list = $this->getModel('OrderSubcontract')->find(array('conditions'=>$condition,'order'=>'ctime desc','columns' => $columns,'limit'=>$limit,'offset'=>$offset));
        if($list){
            $list = $list->toArray();
            foreach($list as $key=>$val){
                $list[$key]['ctime'] = date('Y-m-d H:i:s',$list[$key]['ctime']);
                $list[$key]['shop_name'] = $this->mc->getShop($list[$key]['shop_id'])['name'];
                if($val['platform'] == 'partner' || $val['platform'] == 'app_partner'){
                    $list[$key]['order_type_key'] = '自助订单';
                    $list[$key]['order_type'] = 'self';
                }else{
                    $list[$key]['order_type_key'] = '下发订单';
                    $list[$key]['order_type'] = 'app';
                }
            }
        }
        return $this->renderJson(['list'=>$list,'num'=>$this->getModel('OrderSubcontract')->count(array($condition))]);
    }


    public function moreOrderAction(){
        if($this->request->isPost()){
            $message = '';
            $limit = $this->request->getPost('limit','int',10);
            $orderId = $this->request->getPost('subcontract');
            $type = $this->request->getPost('type');
            $partnerId = $this->userId;
            switch($type){
                case 1:
                    $status = "status = 0";
                    break;
                case 2:
                    $status = "status = 1";
                    break;
                case 3:
                    $status ="status >= 2";
                    break;
                default:
            }
            $columns = ['id','order_id','subcontract','ctime','shop_id','pay_amount','order_sn','buy_amount','status','platform'];
            $order = $this->getModel('OrderSubcontract')->findFirst("is_del = 0 and subcontract = ".$orderId ." and  ".$status." and partner_id = ".$partnerId);
            if(!$order){
                return $this->renderJson(['list'=>array(),'num'=>0]);
            }
            $ctime = $order->ctime;
            $condition = "is_del = 0 and ctime <= '{$ctime}'  and ".$status." and partner_id = ".$partnerId." and subcontract not in ('".$orderId."')" ;
            $list = $this->getModel('OrderSubcontract')->find(array($condition,'columns'=>$columns,'limit'=>$limit,'order'=>'ctime desc'));
            if($list){
                $list = $list->toArray();
                foreach($list as $key=>$val){
                    $list[$key]['ctime'] = date('Y-m-d H:i:s',$list[$key]['ctime']);
                    $list[$key]['shop_name'] = $this->mc->getShop($list[$key]['shop_id'])['name'];
                    if($val['platform'] == '
                    ' || $val['platform'] == 'app_partner'){
                        $list[$key]['order_type_key'] = '自助订单';
                        $list[$key]['order_type'] = 'self';
                    }else{
                        $list[$key]['order_type_key'] = '下发订单';
                        $list[$key]['order_type'] = 'app';
                    }
                }
            }
            return $this->renderJson(['list'=>$list,'num'=>$this->getModel('OrderSubcontract')->count(array($condition))],$message);
        }
    }


    public function searchAction(){

        if($this->request->isPost()) {
            $limit = $this->request->getPost('limit') ? $this->request->getPost('limit') : 10;
            $offset = $this->request->getPost('offset') ? $this->request->getPost('offset') : 0;
            $search = $this->request->getPost('search');
            $userId = $this->userId;
            $condition = "is_del = 0 and partner_id = " . $userId;
            if ($search && is_numeric($search)) {
                $condition .= " and order_sn = '{$search}'";
            }
            $columns = ['id','order_id','subcontract','ctime','shop_id','pay_amount','order_sn','buy_amount','status','platform'];
            $list = $this->getModel('OrderSubcontract')->find(array('conditions' => $condition, 'order' => 'ctime desc', 'columns' => $columns, 'limit' => $limit, 'offset' => $offset))->toArray();
            if ($list) {
                foreach ($list as $key => $val) {
                    $list[$key]['ctime'] = date('Y-m-d H:i:s', $list[$key]['ctime']);
                    $list[$key]['shop_name'] = $this->mc->getShop($list[$key]['shop_id'])['name'];
                    if($val['platform'] == 'partner' || $val['platform'] == 'app_partner'){
                        $list[$key]['order_type_key'] = '自助订单';
                        $list[$key]['order_type'] = 'self';
                    }else{
                        $list[$key]['order_type_key'] = '下发订单';
                        $list[$key]['order_type'] = 'app';
                    }
                }
            }
            return $this->renderJson(['list' => $list, 'num' => $this->getModel('OrderSubcontract')->count(array($condition))]);
        }
    }



    public function detailAction(){
        $result = array();
        $orderId = $this->request->getQuery('subcontract');
        $order = $this->getModel('OrderSubcontract')->findFirst('subcontract = '.$orderId);
        if (!$order) {
            $message = '没有权限查看该订单';
            return $this->renderJson(array(), $message);
        }
        //订单详情列表
        $orderSku = $this->getModel('orderSku')->find(array('is_del = 0 and subcontract ='.$orderId));
        if($orderSku) {
            $orderSku = $orderSku->toArray();
            $skuNum = 0;
            $skuNum = count($orderSku);
            foreach ($orderSku as $key => $val) {
                $sku = $this->getModel('partnerSku')->findById($val['sku_id']);
                unset($orderSku[$key]['order_detail']);
                unset($orderSku[$key]['order_id']);
                unset($orderSku[$key]['user_id']);
                unset($orderSku[$key]['utime']);
                unset($orderSku[$key]['is_del']);
                $sku['pic_url']=$this->img->getUrlById('partner_sku',$sku['id']);
                $unit = $this->dict($sku['unit_id']);
                $orderSku[$key]['unit_name'] = isset($unit['name']) ? $unit['name'] : '';
                unset($orderSku[$key]['unit_id']);
                $measure = $this->dict($sku['measure_id']);
                $orderSku[$key]['measure_name'] = isset($measure['name']) ? $measure['name'] : '';
                $orderSku[$key]['pic_url'] = $sku['pic_url'];
                unset($orderSku[$key]['measure_id']);
                if ($sku['discount_price'] > 0) {
                    $orderSku[$key]['price'] = $sku['discount_price'];
                } else {
                    $orderSku[$key]['price'] = $sku['unit_price'];
                }
            }
            $orderInfo = $order->toArray();
            $orderInfo['ctime'] = date('Y-m-d H:i:s',$orderInfo['ctime']);
            $shop_name = $this->getModel('shop')->findFirst($order->shop_id)->name;
            $orderInfo['skuNum'] = $skuNum;
            $orderInfo['shop_name'] = $shop_name;
            unset($orderInfo['shop_id']);
            unset($orderInfo['utime']);
            unset($orderInfo['is_del']);
            unset($orderInfo['user_id']);
            $result['order_info'] = $orderInfo;
            $result['detail'] = $orderSku;
            return $this->renderJson($result);
        }
    }




    public function createAction()
    {
        //提交订单
        if($this->request->isPost()){

            //客户ID
            $shop_id = $this->request->getPost('shop_id');
            //订单备注
            $order_remark = $this->request->getPost('order_remark');

            //价格数组
            $price = $this->request->getPost('price');
            $price = json_decode($price,true);
            //购买数量数组
            $number = $this->request->getPost('number');
            $number = json_decode($number,true);
            //商品备注数组
            $remark = $this->request->getPost('remark');
            $remark = json_decode($remark,true);
            //商品列表
            $order_data  = [];
            foreach ($price as $key => $val) {
                $order_data[$key]['sku_id'] = $key;
                $order_data[$key]['buy_number'] = $number[$key];
                $order_data[$key]['user_remark'] = $remark[$key];
                //写入一客一价
                $this->createModel('partnerSkuYkyj')->savePrice($shop_id,$this->userId,$key,$val);
            }
            //生成订单
            $is_success = $this->getModel('order')->createOrder($this->mc->getShop($shop_id)['user_id'], $shop_id, $order_data , 1, $order_remark);
           return $this->renderJson($is_success);
        }
    }

    //实时采购单
    public function purchaseAction(){
        $partnerId = $this->userId;
        $limit = $this->request->getQuery('limit','int',10);
        $offset = $this->request->getQuery('offset','int',0);
        $categoryId = $this->request->getQuery('category_id');
        $today = \Libs\Util::getStartUnixTime();//今日起始时间
        $yesterday = \Libs\Util::getStartUnixTime(1);
        $type = $this->request->getQuery('type','int',1);
        $condition = "is_del = 0 and partner_id = ".$partnerId;
        $columns = ['id','subcontract'];
        $ord= $this->getModel('OrderSubcontract')->find(array($condition,'columns'=>$columns));
        $ids = '';
        if($ord){
            $ord = $ord->toArray();
            foreach($ord as $v){
                $ids.=",".$v['subcontract'];
            }
            $ids=substr($ids,1);
            $where = "partner_id=" . $partnerId . " and is_del=0  and subcontract in($ids)";
            if(intval($type)==1){
                $where .= " and ctime >= '{$today}'";
            }else if(intval($type)==2){
                $where .= " and ctime >= '{$yesterday}' and ctime < '{$today}'";
            }else{
                $where .= " and ctime < '{$yesterday}'";
            }

            $res_order = $this->getModel('orderSku')->find(array($where,'limit'=>$limit,'offset'=>$offset, 'group' => 'sku', 'columns' => "sum(buy_number) as nums,count(id) as purchase_num,group_concat(buy_number) as buy_numbers,group_concat(shop_id) as shop_ids,group_concat(user_remark) as user_remarks,group_concat(sku_type) as types,concat(sku_id,'|',sku_type) as sku,sku_name,sku_id,shop_id,unit_price,buy_number,partner_id,unit_id,order_sn,category_id,spec,remark", 'order' => 'sku_id desc, sku_name asc'))->toArray();
            return $this->renderJson(['list'=>$res_order,'num'=>$this->getModel('orderSku')->count(array($where))]);
        }else{
            return $this->renderJson(['list'=>array(),'num'=>0]);
        }
    }


    public function changeOrderStatusAction() {
        if($this->request->isPost()){
            $orderIds = $this->request->getPost('order_id');
            $order_id = trim($orderIds, ',');
            $status = $this->request->getPost('status');
            $partner_id = $this->userId;
            $message = '';
            $order = $this->getModel('order')->find(array('conditions'=>'id in ('.$order_id.')'));
            foreach ($order as $key => $value) {
                if ($value->status == 3 || $value->status == 4) {
                    $message .= '订单' . $value->sn . '已取消';
                    continue;
                }
                if ($status == 1) {
                    $value->status = 1;
                    $value->save();
                }
                if ($status == 6) {
                    $value->status = 4;
                    $value->save();
                }
                $orders = $this->getModel('orderSubcontract')->findFirst(array('order_id=' . $value->id . ' and partner_id=' . $partner_id));
                if ($orders->partner_id != $partner_id) {
                    continue;
                }
                if ($status == 1) {
                    if ($orders->status != 0) {
                        continue;
                    }
                } else if ($status == 2) {
                    if ($orders->status != 1) {
                        continue;
                    }
                } else {
                    continue;
                }
                $orders->status = $status;
                if ($status == 1) {
                    $orders->confirm_time = time();
                } else if ($status == 2) {
                    $orders->send_time = time();
                }
                if (!$orders->save()) {
                    $message = $orders->getError();
                }
            }
            return $this->renderJson($orders,$message);
        }
    }


    public function addskuAction(){
        if($this->request->isPost()){
            //客户ID
            $shop_id = $this->request->getPost('shop_id','int',0);
            //订单备注
            $orderId = $this->request->getPost('order_id');
            $order_remark = $this->request->getPost('order_remark','string','');
            //价格数组
            $price = $this->request->getPost('price');
            $price = json_decode($price,true);
            //购买数量数组
            $number = $this->request->getPost('number');
            $number = json_decode($number,true);
            //商品备注数组
            $remark = $this->request->getPost('remark');
            $remark = json_decode($remark,true);
            //商品列表
            $order_data  = [];
            foreach ($price as $key => $val) {
                $order_data[$key]['sku_id'] = $key;
                $order_data[$key]['buy_number'] = $number[$key];
                $order_data[$key]['user_remark'] = $remark[$key];
                //写入一客一价
                $ykyjPrice = $this->getModel('PartnerSkuYkyj')->getYkyj($shop_id,$this->userId,$key);
                $this->createModel('PartnerSkuYkyj')->savePrice($shop_id,$this->userId,$key,$val);
            }
            $is_success = $this->getModel('orderSku')->add($this->mc->getShop($shop_id)['user_id'], $shop_id, $order_data , 1, $order_remark, $orderId, $this->userId);
            $this->renderJson(array('id'=>$is_success['id'], $is_success['message']));
        }
    }


    //整体打折

    public function changepriceAction(){
        $message = '无效';
        if($this->request->isPost()) {
            $message = '';
            $subcontract = $this->request->getPost('subcontract');
            $orderSubcontract = $this->getModel('orderSubcontract')->findFirst(array('subcontract="' . $subcontract . '"'));
            $partnerId = $this->userId;
            $discount = $this->request->getPost('discount');
            if ($partnerId != $orderSubcontract->partner_id) {
                $message =  '非自己订单不可操作';
            }
            $discount = floatval($discount);
            if ($discount <= 0 || $discount >= 1) {
                $message = '打折额度输入有误，请输入0.50-0.99的数字';
            }

            if ($orderSubcontract->pay_discount != '0.00') {
                $message =  '该订单已打折，不可再次打折';
            }
            if (!in_array($orderSubcontract->status, array(1, 2))) {
                $message = '不是待发货或已发货状态';
            }
            if($message == '') {
                //更新每个商品价格
                $skus = $this->getModel('OrderSku')->find('subcontract="' . $subcontract . '"');
                $totalChange = 0;
                foreach ($skus as $sku) {
                    $beforeValue = $sku->pay_amount;
                    $sku->pay_amount = round($sku->pay_amount * $discount, 2);
                    $totalChange += $sku->pay_amount - $beforeValue;
                    $sku->save();
                }

                $orderSubcontract->pay_amount = $orderSubcontract->pay_amount + $totalChange;
                $orderSubcontract->pay_discount = $discount;
                $orderSubcontract->save();
                //更新订单总金额
                $order = $this->getModel('order')->findFirst($orderSubcontract->order_id);
                $this->getModel('order')->updateOne($orderSubcontract->order_id, array('pay_amount' => $order->pay_amount + $totalChange));
            }
        }
        return $this->renderJson([$orderSubcontract],$message);
    }


    public function changenumberAction(){
        if ($this->request->isPost()) {
            $result = array();
            $orderId = $this->request->getPost('subcontract');
            $id = $this->request->getPost('id');
            $number = $this->request->getPost('number');
            $price = $this->request->getPost('unit_price') ? $this->request->getPost('unit_price') : NULL;
            $creator_id = $this->userId;
            $success = $this->getModel('orderSku')->changNumber($id, $number, $price, $creator_id);
            $order = $this->getModel('OrderSubcontract')->findFirst('subcontract = '.$orderId);
            $result['order_info'] = $order;
            if ($success === TRUE) {
                $this->renderJson($result);
            } else {
                $this->renderJson([], $success);
            }
        }
    }

    public function deleteskuAction()
    {
        if ($this->request->isPost()) {
            $orderId = $this->request->getPost('subcontract');
            $orderSkuId = $this->request->getPost('sku_id');
            $orderSku = $this->getModel('OrderSku')->findFirst('subcontract = '.$orderId.' sku_id = '.$orderSkuId);
            $orders = $this->getModel('OrderSku')->find(array('conditions' => 'subcontract=' . $orderId . ' and is_del=0'))->toArray();
            if (count($orders) <= 1) {
                return $this->renderJson([], '该订单仅剩一条商品，不允许删除');
            }
            $orderSku->is_del = 1;
            if ($orderSku->save()) {
                $order = $this->getModel('OrderSubcontract')->findFirst(array('conditions' => 'subcontract=' . $orderId));
                $order->pay_amount = $order->buy_amount = $order->pay_amount - $orderSku->pay_amount;
                $order->save();
                $orders = $this->getModel('order')->findFirst($order->order_id);
                $orderamount = $orders->pay_amount - $orderSku->pay_amount;
                $this->getModel('order')->updateOne($order->order_id, array('pay_amount' => $orderamount, 'buy_amount' => $orderamount));
                return $this->renderJson([]);
            } else {
                return $this->renderJson([], $orderSku->getMessages());
            }
        }
    }



}