<?php
/**
 * Created by PhpStorm.
 * User: jiangzhuoran
 * Date: 2015/9/9
 * Time: 15:18
 */

namespace Modules\App\Controllers;

class BSkuController extends BAppController{
    var $tagArr = [];

    public function initialize(){
        parent::initialize();

        $this->tagArr = [1=>"快餐/食堂",2=>'普通餐馆',3=>'高档酒楼'];
    }

    /*
     * 商品列表
     * @param  $offset
     * @param  $limit
     * @param  $categoryId
     * @param  $pcategoryId
     */

    public function listAction()
    {
        $offset = $this->request->getQuery('offset','int',0);
        $limit = $this->request->getQuery('limit','int',10);
        $partnerId = $this->userId;
        $condition = 'partner_id = '.$partnerId;
        $categoryId = $this->request->getQuery('category_id','int');
        if(intval($categoryId)>0){
            $condition .= " and category_id = ".$categoryId;
        }
        $pcategoryId = $this->request->getQuery('parent_category_id','int');
        if(intval($pcategoryId)>0){
            $condition .= " and parent_category_id = ".$pcategoryId;
        }
        //select字段
        $columns = ['id','name','remark','unit_id','unit_price','unit_number','measure_id','origin','category_id','parent_category_id','is_del'];
        $list = $this->getModel('partnerSku')->find(array($condition,'order'=>'ctime desc','columns'=>$columns,'limit'=>$limit , 'offset' => $offset))->toArray();
        $return = [];
        foreach ($list as $val) {
            $val['origin'] = $val['origin'] ? $val['origin'] :'';
            //计数单位
            $unit = $this->dict($val['unit_id']);
            $val['unit_name'] = isset($unit['name']) ? $unit['name'] : '';
            unset($val['unit_id']);
            //计量单位
            $measure = $this->dict($val['measure_id']);
            $val['measure_name'] = isset($measure['name']) ? $measure['name'] : '';
            unset($val['measure_id']);
            $val['unit_price'] = $val['unit_price'];
            //图片
            $val['pic_url'] = $this->img->getUrlById('partner_sku', $val['id']);
            $return[] = $val;
        }
        $count = $this->getModel('partnerSku')->count(array($condition));
        return  $this->renderJson(['list'=>$return,'num'=>$count]);
    }


    public function skulistAction(){
        /* 一级分类 */
        $condition = '1';
        /* 搜索条件[一级分类] */
        $parent_category_id = $this->request->getQuery('parent_category_id');
        if(intval($parent_category_id)>0){
            $condition .= " and parent_category_id = ".$parent_category_id;
        }
        /* 搜索条件[二级分类] */
        $category_id = $this->request->getQuery('category_id');
        if(intval($category_id)>0){
            $condition .= " and category_id = ".$category_id;
        }
        //已经复制的商品
        $copyedList = $this->getModel('partnerSku')->getList($condition.' and partner_id='.$this->userId);
        $skuCopyArr = [];
        foreach ($copyedList as $key => $val) {
            $skuCopyArr[]="{$val['name']}|{$val['spec']}|{$val['category_id']}|{$val['parent_category_id']}";
        }
        $list = $this->getModel('sku')->find(array($condition.' and is_del = 0','order'=>'ctime desc'));
        $skuList = [];
        foreach ($list as $key => $val) {
            $sku = $val->toArray();
            if(!in_array("{$sku['name']}|{$sku['spec']}|{$sku['category_id']}|{$sku['parent_category_id']}", $skuCopyArr)){
                $val->pic_url = $this->img->getUrlById('sku', $val->id);
                //计数单位
                $unit = $this->dict($val->unit_id);
                $val->unit_name = isset($unit['name']) ? $unit['name'] : '';
                unset($val->unit_id);
                //计量单位
                $measure = $this->dict($val->measure_id);
                $val->measure_name = isset($measure['name']) ? $measure['name'] : '';
                unset($val->measure_id);
                $skuList[] = $val;
            }
        }
        return $this->renderJson(['list'=>$skuList]);
    }


    /*
     * 商品详情
     * @param  $skuId
     */
    public function detailAction(){
        //初始化
        $condition = '1';
        $partnerId = $this->userId;
        //ID
        $skuId = $this->request->getQuery('id');
        if(!isset($skuId)){
            return $this->renderJson([],'参数错误');
        }
        if(intval($skuId)>0){
            $condition .= ' and id='.$skuId.' and partner_id = '.$partnerId;
        }
        //字段
        $columns = ['id','name','remark','content','unit_id','unit_price','unit_number','measure_id','tag','discount_price','origin','spec','is_del','category_id','parent_category_id'];
        //查询，关联字段
        $oneSku = $this->getModel('partnerSku')->findFirst(array($condition,'order'=>'sort desc','columns'=>$columns));
        $condition = "is_del = 0 and sku_id = ".$skuId;
        $buy_number = $this->getModel('orderSku')->findFirst(array($condition,'columns'=>'sum(buy_number) as buy_number'));
        $oneSku->unit_name = $this->dict($oneSku->unit_id)['name'];
        $oneSku->buy_number = $buy_number->buy_number ? $buy_number->buy_number : 0;
        $oneSku->category = $this->mc->getCategory($oneSku->category_id)['name'];
        $oneSku->parent_category = $this->mc->getCategory($oneSku->parent_category_id)['name'];
        $oneSku->measure_name = $this->dict($oneSku->measure_id)['name'];
        //图片
        $oneSku->pic_url=$this->img->getUrlById('partner_sku',$oneSku->id);
        return $this->renderJson(['product'=>$oneSku]);
    }

    //设置价格
    //设置SKU价格 显示客户列表
    public function setpricebyskuAction()
    {
        $param = $this->request->getPost();
        if(!isset($param['id']) || !isset($param['price'])){
            return $this->renderJson(['list'=>array()],'参数错误');
        }
        $partnerId = $this->userId;
        $shopList = $this->getModel('shopSku')->getShopListByPartnerId($partnerId);
        $priceArr = json_decode($param['price'],true);
        if(is_array($priceArr) && !empty($priceArr)) {
            foreach ($priceArr as $key => $val) {
                $this->getModel('PartnerSkuYkyj')->savePriceByPartner($key, $partnerId, $param['id'], $val);
            }
        }
        return $this->renderJson(['list'=>$shopList]);
    }



    /* 添加商品 */
    public function createAction()
    {
        if($this->request->isPost()) {
            $content = $this->request->getPost('content');
            $content = trim($content);
            $name = $this->request->getPost('name');
            $name = trim($name);
            $picUrl = $this->request->getPost('pic_url');
            $category_id = $this->request->getPost('category_id','int');
            $parent_category_id = $this->request->getPost('parent_category_id','int');
            $sku['name'] = $name;
            $sku['content'] = $content;
            $sku['remark'] = $this->request->getPost('remark');
            $sku['parent_category_id'] = $parent_category_id;
            $sku['category_id'] = $category_id;
            $sku['hot'] = $this->request->getPost('hot') ? $this->request->getPost('hot','int') : 0;
            $sku['new'] = $this->request->getPost('new') ? $this->request->getPost('new','int') : 0;
            $sku['origin'] = $this->request->getPost('origin') ? $this->request->getPost('origin') : '';
            $sku['unit_id'] = $this->request->getPost('unit_id');
            $sku['unit_price'] = $this->request->getPost('unit_price');
            $sku['unit_number'] = $this->request->getPost('unit_number');
            $sku['measure_id'] = $this->request->getPost('measure_id');
            $sku['spec'] = $this->request->getPost('spec');
            $sku['partner_id'] = $this->userId;
            $res = $this->getModel('partnerSku')->createOne($sku);
            $messages = '';
            if($res['error']) {
                $messages = $res['error'];
            }else{
                //保存图片
                if(!empty($picUrl)){
                    $picUrl = base64_decode($picUrl);
                     $this->img->uploadContentById('partner_sku',$res['id'],$picUrl);
                }
            }
        }
        return $this->renderJson($res,$messages);
    }



    /* 修改商品 */
    public function updateAction()
    {
        $messages = '';
        if($this->request->isPost()) {
            $skuId = $this->request->getPost('id',"int");
            $sku = $this->getModel('partnerSku')->findFirst($skuId);
            if(!isset($sku->id)){
                $this->renderJson('','商品不存在');
            }
            if($sku->partner_id!=$this->userId){
                $this->renderJson('','不能修改');
            }
            $picUrl = $this->request->getPost('pic_url');
            $name = $this->request->getPost('name');
            $name = trim($name);
            $skulist['name'] = trim($name);
            $category_id = $this->request->getPost('category_id',"int");
            $skulist['category_id'] = $category_id;
            $parent_category_id = $this->request->getPost('parent_category_id',"int");
            $skulist['parent_category_id'] = $parent_category_id;
            $content = $this->request->getPost('content');
            $content = trim($content);
            $skulist['content'] = $content;
            $remark =   $this->request->getPost('remark');
            $skulist['remark'] = $remark;
            $skulist['unit_id'] = $this->request->getPost('unit_id');
            $skulist['unit_price'] = $this->request->getPost('unit_price');
            $skulist['unit_number'] = $this->request->getPost('unit_number');
            $skulist['measure_id'] = $this->request->getPost('measure_id');
            $skulist['discount_price'] = $this->request->getPost('discount_price');
            $skulist['spec'] = $this->request->getPost('spec');
            $skulist['partner_id'] = $this->userId;
            $res = $this->getModel('partnerSku')->updateOne($skuId,$skulist);
            $messages = '';
            if($res['error']) {
                $messages = $res['error'];
            }else{
                //保存图片
                if(!empty($picUrl)){
                    $picUrl = base64_decode($picUrl);
                    $this->img->uploadContentById('partner_sku',$sku->id,$picUrl);
                }
            }
        }
        return $this->renderJson([],$messages);
    }

    /* 复制公共商品库的商品 */
    public function copyAction()
    {
        //复制商品
        if($this->request->isPost()){
            $cacheKey = 'copyLock_'.$this->userId;
            $lock = $this->cache->get($cacheKey);
            if($lock){
                return $this->renderJson([],'正在执行复制，请勿重复');
            }

            $this->cache->save($cacheKey,1,1800);

            $ids = $this->request->getPost('ids');
            $ids = trim($ids,',');
            $skuList = $this->getModel('sku')->find("id in ($ids) and is_del=0")->toArray();
            $userId = $this->userId;
            //已经导入
            $messages = '';
            $num=0;
            $copyImageSkuIds=[];


            foreach ($skuList as $key => $val) {
                $val['partner_id']=$userId;
                //清除折扣价格
                $val['discount_price'] = 0;
                $sku = $this->createModel('partnerSku')->createOne(array_slice($val,1));
                if($sku['id']){
                        $copyImageSkuIds[] = ['from'=>$val['id'],'to'=>$sku['id']];
                        $num++;
                }
            }

            if(!empty($copyImageSkuIds)){
                $this->getAsynModel('partnerSku','copySku',array('copyImageSkuIds'=>$copyImageSkuIds));
            }
            $this->cache->delete($cacheKey);

        }
        return $this->renderJson(['num'=>$num],$messages);
    }

    public function searchAction(){

        $search = $this->request->getQuery('search');
        $search = trim($search);
        $partnerId = $this->userId;
        $limit = $this->request->getQuery('limit','int',10);
        $offset = $this->request->getQuery('offset','int',0);
        $condition = "partner_id = ".$partnerId;
        if(!empty($search)) {
            //公共商品
            $condition .= " and search_name LIKE '%".$search."%'";
        }
        $columns = ['id','name','remark','unit_id','unit_price','unit_number','measure_id','origin','discount_price','category_id','parent_category_id'];
        $allSku = $this->getModel('partnerSku')->find(array($condition,'order'=>'sort asc','columns'=>$columns,'limit'=>$limit,'offset'=>$offset))->toArray();
        foreach ($allSku as $key => $val) {
            if ($allSku[$key]['discount_price'] > 0) {
                $allSku[$key]['unit_price'] = $allSku[$key]['discount_price'];
            } else {
                $allSku[$key]['unit_price'] = $allSku[$key]['unit_price'];
            }
            $allSku[$key]['unit_name'] = $this->mc->getDict($val['unit_id'])['name'];
            $allSku[$key]['pic_url'] = $this->img->getUrlById('partner_sku',$val['id']);
        }
        $this->renderJson(['list'=>$allSku])  ;
    }

    //商品下架
    public function downAction(){
        $param = $this->request->getPost();
        if(!isset($param['id']) || !isset($param['is_del'])){
            return $this->renderJson([],'参数错误');
        }
        $sku = $this->getModel('partnerSku')->findFirst($param['id']);
        $sku->is_del = $param['is_del'];
        if($sku->save()) {
            $this->renderJson([$sku]);
        }else{
            $this->renderJson([],"失败");
        }
    }


    //设置价格

    //设置SKU价格 显示客户列表
    public function setpriceAction()
    {
        $partnerId = $this->userId;
        $param = $this->request->getPost();
        if(!isset($param['shop_id']) && !isset($param['price']) && !isset($param['sku_id'])){
            return $this->renderJson([],'参数错误');
        }
        $message = $this->getModel('PartnerSkuYkyj')->savePriceByPartner($param['shop_id'], $partnerId, $param['sku_id'], $param['price']);
        return $this->renderJson([],$message);
    }

//常购商品
    public function commenAction(){
        $condition = "is_del = 0";
        $shopId = $this->request->getQuery('shop_id');
        $limit = $this->request->getQuery('limit','int',10);
        $offset = $this->request->getQuery('offset','int',0);
        $order = "sort desc";
        //分类
        $category_id = $this->request->getQuery('category_id');
        if(intval($category_id)>0){
            $condition .= ' and category_id='.$category_id;
        }
        $pcategory_id = $this->request->getQuery('parent_category_id');
        if(intval($pcategory_id)>0){
            $condition .= " and parent_category_id = ".$pcategory_id;
        }
        $shopSku = $this->getModel('shopSku')->getPartnerListByShop($shopId);
        $partner = array_keys($shopSku);
        $partnerStr = implode(',',$partner);
        if(!empty($partnerStr)){
            $condition .= " and partner_id in (".$partnerStr.")";
        }
        //select字段
        $columns = ['id','name','remark','parent_category_id','category_id','unit_id','unit_price','unit_number','measure_id'];
        $list = $this->getModel('partnerSku')->find(array($condition,'order'=>$order,'columns'=>$columns,'limit'=>$limit , 'offset' => $offset));
        $ykyj = $this->getModel('partnerSkuYkyj')->getYkyjListByShopId($shopId);
        $return = [];
        if($list) {
            $list = $list->toArray();
            foreach ($list as $val) {
                //计数单位
                $unit = $this->dict($val['unit_id']);
                $val['unit_price'] = (isset($ykyj[$val['id']])&&!empty($ykyj[$val['id']])) ? $ykyj[$val['id']] : $val['unit_price'];
                $val['unit_name'] = isset($unit['name']) ? $unit['name'] : '';
                unset($val['unit_id']);
                //计量单位
                $measure = $this->dict($val['measure_id']);
                $val['measure_name'] = isset($measure['name']) ? $measure['name'] : '';
                unset($val['measure_id']);
                //图片
                $val['pic_url'] = $this->img->getUrlById('partner_sku', $val['id']);
                //是否收藏
                $val['is_favored'] = $this->userId > 0 ? $this->getModel('userFavor')->count(['is_del=0 and user_id=' . $this->userId . ' and sku_id=' . $val['id']]) : 0;
                $return[] = $val;
            }
        }
        //常购商品
        $alwaysList = $this->getModel('UserSku')->getList($this->mc->getShop($shopId)['user_id'],'partner');
        return $this->renderJson(['list'=>$return,'alwayslist'=>$alwaysList]);

    }

    public function shoppriceAction(){
        $partnerId = $this->userId;
        $skuId = $this->request->getQuery('sku_id','int');
        $list = $this->getModel('PartnerSkuYkyj')->getListByPartnerSku($partnerId,$skuId);
        $limit = $this->request->getQuery('limit','int',10);
        $offset = $this->request->getQuery('offset','int',0);
        $condition = "id = ".$skuId;
        $price = $this->getModel('partnerSku')->count($condition) ? $this->getModel('partnerSku')->findFirst($condition)->unit_price : 0;
        $shopsku = $this->getModel('shopSku')->find('is_del = 0 and partner_id ='.$partnerId)->toArray();
        if(!empty($shopsku)) {
            foreach ($shopsku as $key => $val) {
                $shopid[] = $val['shop_id'];
                $newshop = array_unique($shopid);
            }
            $box = '';
            if (isset($newshop)) {
                foreach ($newshop as $key => $val) {
                    $box .= "," . $val;
                }
            }
            $newbox = substr($box, 1);

            $where = ' is_del = 0 and id in (' . $newbox . ')';
            $shop = $this->getModel('shop')->find(array($where, "order" => "id desc", "limit" => $limit, "offset" => $offset,'columns'=>'id,name,platform'))->toArray();
            foreach ($shop as $key => $val) {
                if ($val['platform'] == 'partner' || $val['platform'] == 'app_partner') {
                    $shop[$key]['type_key'] = '自助客户';
                    $shop[$key]['type'] = 'self';
                } else {
                    $shop[$key]['type_key'] = '下发客户';
                    $shop[$key]['type'] = 'app';
                }
                $shop[$key]['price'] = (isset($list[$shop[$key]['id']]['price']) && !empty($list[$shop[$key]['id']]['price'])) ? $list[$shop[$key]['id']]['price'] : $price;
            }

            return $this->renderJson(['shoplist' => $shop]);
        }
    }

    public function getDictAction(){
        $measureArr = $this->getModel('dict')->find(['is_del=0 and parent_id=43','columns'=>['name','id'],'order'=>'sort asc'])->toArray();
        $unit = $this->getModel('dict')->find(['is_del=0 and parent_id=37','columns'=>['name','id'],'order'=>'sort asc'])->toArray();
        return $this->renderJson(['measure'=>$measureArr,'unit'=>$unit]);
    }


    /**
     * listAction
     * 商品列表
     * @param int $shop_id           必选，店铺         店铺ID
     * @param int $category_id       可选，分类         分类ID
     * @param int $limit             必选，条数         默认：10
     * @param int $offset            必选，开始         默认：0
     */
    public function ykyjlistAction(){

        //搜索条件初始化
        $partnerId = $this->userId;
        $condition = 'is_del = 0 and partner_id = '.$partnerId;
        $order = 'sort asc';
        //分类
        $category_id = $this->request->getQuery('category_id','int');
        if(intval($category_id)>0){
            $condition .= ' and category_id='.$category_id;
        }
        $pcategory_id = $this->request->getQuery('parent_category_id','int');
        if(intval($pcategory_id)>0){
            $condition .= " and parent_category_id = ".$pcategory_id;
        }
        $shopId = $this->request->getQuery('shop_id');
        $offset = $this->request->getQuery('offset','int',0);
        $limit = $this->request->getQuery('limit','int',10);
        //select字段
        $columns = ['id','name','remark','parent_category_id','category_id','unit_id','unit_price','unit_number','measure_id'];
        $list = $this->getModel('partnerSku')->find(array($condition,'order'=>$order,'columns'=>$columns,'limit'=>$limit , 'offset' => $offset))->toArray();
        $ykyj = $this->getModel('partnerSkuYkyj')->getYkyjListByShopId($shopId);
        $return = [];
        if(is_array($list) && !empty($list)) {
            foreach ($list as $val) {
                //计数单位
                $unit = $this->dict($val['unit_id']);
                $val['unit_price_app'] = (isset($ykyj[$val['id']])&&!empty($ykyj[$val['id']])) ? $ykyj[$val['id']] : $val['unit_price'];
                $val['unit_name'] = isset($unit['name']) ? $unit['name'] : '';
                unset($val['unit_id']);
                //计量单位
                $measure = $this->dict($val['measure_id']);
                $val['measure_name'] = isset($measure['name']) ? $measure['name'] : '';
                unset($val['measure_id']);
                //图片
                $val['pic_url'] = $this->img->getUrlById('partner_sku', $val['id']);
                //是否收藏
                $val['is_favored'] = $this->userId > 0 ? $this->getModel('userFavor')->count(['is_del=0 and user_id=' . $this->userId . ' and sku_id=' . $val['id']]) : 0;
                $return[] = $val;
            }
        }
        $count = $this->getModel('partnerSku')->count(array($condition));
        $this->renderJson(['list'=>$return,'num'=>$count]);
    }

    /**
     * searchAction
     * 商品搜索
     *
     * @param int $shopId           必选，店铺id
     * @param int $limit             必选，条数         默认：10
     * @param int $offset            必选，开始         默认：0
     */
    public function ykyjsearchAction(){
        //搜索条件初始化
        $partnerId = $this->userId;
        $condition = 'is_del = 0 and partner_id = '.$partnerId;
        $order = 'sort asc';
        $name = $this->request->getQuery('search');
        if($name){
            $condition .= ' and search_name like \'%'.$name.'%\'';
        }
        //分类
        $category_id = $this->request->getQuery('category_id');
        if(intval($category_id)>0){
            $condition .= " and category_id = ".$category_id;
        }
        $pcategory_id = $this->request->getQuery('parent_category_id');
        if(intval($pcategory_id)>0){
            $condition .= " and parent_category_id = ".$pcategory_id;
        }
        $offset = $this->request->getQuery('offset');
        $shopId = $this->request->getQuery('shop_id');
        $limit = $this->request->getQuery('limit');
        $ykyj = $this->getModel('partnerSkuYkyj')->getYkyjListByShopId($shopId);
        //select字段
        $columns = ['id','name','remark','unit_id','unit_price','unit_number','measure_id','discount_price','tag','category_id','parent_category_id'];
        $list = $this->getModel('partnerSku')->find(array($condition,'order'=>$order,'columns'=>$columns,'limit'=>$limit , 'offset' => $offset))->toArray();
        if(empty($list) || !$list){
            return $this->renderJson(['list'=>array(),'num'=>0]);
        }
        if(is_array($list) && !empty($list)) {
            foreach ($list as $key => $val) {
                //计数单位
                $unit = $this->dict($val['unit_id']);
                $list[$key]['unit_name'] = isset($unit['name']) ? $unit['name'] : '';
                $list[$key]['unit_price_app'] = (isset($ykyj[$val['id']])&&!empty($ykyj[$val['id']])) ? $ykyj[$val['id']] : $val['unit_price'];
                unset($list[$key]['unit_id']);
                //计量单位
                $measure = $this->dict($val['measure_id']);
                $list[$key]['measure_name'] = isset($measure['name']) ? $measure['name'] : '';
                unset($list[$key]['measure_id']);
                //图片
                $list[$key]['pic_url'] = $this->img->getUrlById('partner_sku', $val['id']);
            }
        }
        $this->renderJson(['list'=>$list,'num'=>$this->getModel('partnerSku')->count(array($condition))]);
    }



}