<?php
/**
 *  配销商自有订单管理
 *
 * @author      zhangrg
 * @version     20150811
*/
namespace Modules\Partner\Controllers;

class PartnerorderController extends PartnerController
{
    
	//订单列表
    public function listAction()
    {
    	$status = '';
    	$where = 'is_del = 0 and partner_id='.$this->currentUser['id'];
    	$limit = 10;
    	$page = $this->request->getQuery('page');
    	$page = isset($page) ? $page : 1;
    	$sn = $this->request->getQuery('sn');
    	$status = $this->request->getQuery('status');
    	$contact_name = $this->request->getQuery('contact_name');
    	$receive_mobile = $this->request->getQuery('receive_mobile');
    	$start_time = $this->request->getQuery('start_time');
    	$end_time = $this->request->getQuery('end_time');
    	$url =$this->url->get('partnerorder/list',array('contact_name'=>$contact_name,'statsu'=>$status,'sn'=>$sn,'start_time'=>$start_time,'end_time'=>$end_time));
        
    	//搜索条件
    	if($sn){
    		$where.= ' and sn ='.$sn;
    		$this->view->setVar('sn',$sn);
    	}
    	if($status || $status === '0'){
    		$where.= ' and status ='.$status;
    	}
    	$this->view->setVar('status',$status);
        if($contact_name){
    		$where.= ' and contact_name LIKE "%'.$contact_name.'%"';
    		$this->view->setVar('contact_name',$contact_name);
    	}
    	if($receive_mobile){
    		$where.= ' and receive_mobile LIKE "%'.$receive_mobile.'%"';
    		$this->view->setVar('receive_mobile',$receive_mobile);
    	}
    	if($start_time){
    		$where.= ' and ctime >='.strtotime($start_time);
    		$this->view->setVar('start_time',$start_time);
    	}
    	if($end_time){
    		$et = strtotime($end_time)+86400;
    		$where.= ' and ctime <='.$et;
    		$this->view->setVar('end_time',$end_time);
    	}
    	$total = count($this->getModel('partnerOrder')->find(array($where)));
    	$pageary = $this->pagination($total,$limit,$page,$url);
    	$order = $this->getModel('partnerOrder')->find(array($where,"order"=>"id desc","limit"=>$limit,"offset"=>$pageary['offset']))->toArray();
    	if($order){
    		foreach($order as $k=>$v){
    			$shop = $this->getModel('shop')->findById($v['shop_id']);
    			$order[$k]['shop_name'] = $shop->name;
    		}
    	}
    	
    	$this->view->setVar('page',$pageary['html']);
		$this->view->order = $order;
    }

    //修改订单详情
  /*  public function updateAction()
    {
    	$orderId = intval($this->request->getQuery('id'));
    	$order = $this->getModel('partnerOrder')->findFirst($orderId);
    	$shopId = $order->shop_id;
    	if($this->request->isPost()) {
    		
    		$orderId = $this->request->getPost('id');
    		$remark = $this->request->getPost('remark');
    		$contact_name = $this->request->getPost('contact_name');
    		$receive_address = $this->request->getPost('receive_address');
    		$receive_mobile = $this->request->getPost('receive_mobile');
    		$status = $this->request->getPost('status');    		
    		//修改大订单
    		$order = $this->getModel('partnerOrder')->findFirst($orderId);
    		$order->remark = $remark;
    		$order->contact_name = $contact_name;
    		$order->status = $status;
    		$order->receive_address = $receive_address;
    		$order->receive_mobile = $receive_mobile;
    		$order->shop_id = $shop_id;
    		if($order->save()) {
    			return $this->response->redirect("order/list");
    		}else{
    			echo $order->getError();
    		}
    	}
    	$shop = $this->getModel('shop')->findFirst(array('id='.$shopId));
    	$this->view->order = $order;
    	$this->view->setVar('shop',$shop);
    	
    }*/
    
	//订单详情
    public function detailAction()
    {
    	$orderId = $this->request->getQuery('orderId');
    	$order = $this->getModel('partnerOrder')->findFirst($orderId);
    	if($this->request->isPost()){
    		$orderSkuId = intval($this->request->getPost('id'));
    		$buy_number = intval($this->request->getPost('buy_number'));
    		$buy_amount = $this->request->getPost('buy_amount');
    		$pay_amount = $this->request->getPost('pay_amount');
    		$orderSku = $this->getModel('orderSku')->findFirst($orderSkuId);
    		$orderSku->buy_number = $buy_number;
    		$orderSku->buy_amount = $buy_amount;
    		$orderSku->pay_amount = $pay_amount;
    		if($orderSku->save()){           
                //小订单修改后同事修改大订单金额数量
                $totalBuyAmount = 0;
                $totalPayAmount = 0;
                $orderSkuArr = $this->getModel('orderSku')->find('is_del = 0 and order_id ='.$orderId);
                foreach($orderSkuArr as $sku){
                    $totalBuyAmount += $sku->buy_amount;
                    $totalPayAmount += $sku->pay_amount;
                }
                $order->buy_amount = $totalBuyAmount;
                $order->pay_amount = $totalPayAmount;
                if($order->save()){
                    echo '修改成功！';exit();
                }else{
                    echo $order->getError();exit();
                }
    		}else{
    			echo $orderSku->getError();exit();
    		}

    	}
    	
    	//订单详情列表
    	$orderSku = $this->getModel('orderSku')->find(array('is_del = 0 and order_id ='.$orderId))->toArray();
    	foreach($orderSku as $key=>$val){
    		$sku = $this->getModel('sku')->findById($val['sku_id']);
    		if($sku->discount_price>0){
    			$orderSku[$key]['price'] = $sku->discount_price;
    		}else{
    			$orderSku[$key]['price'] = $sku->unit_price;
    		}
    	}
    	
    	$this->view->setVar('orderId',$orderId);
    	$this->view->ordersku = $orderSku;
    	$this->view->order = $order;
    }

    //删除订单
    public function deleteAction()
    {
    	$orderId = $this->request->getPost('order_id');
        $orderSkuId = $this->request->getPost('order_sku_id');
    	$orderSku = $this->getModel('OrderSku')->findFirst($orderSkuId);
        $orders = $this->getModel('OrderSku')->find(array('conditions'=>'order_id='.$orderId.' and is_del=0'))->toArray();
        if(count($orders) <= 1){
            $this->renderJson('0', '改订单仅剩一条商品，不允许删除');
        }
    	$orderSku->is_del = 1;
    	if($orderSku->save()) {
            $order = $this->getModel('OrderSubcontract')->findFirst(array('conditions'=>'order_id='.$orderId));
            $order->pay_amount = $order->buy_amount = $order->pay_amount - $orderSku->pay_amount;
            $order->save();
            $orders = $this->getModel('order')->findFirst($order->order_id);
            $orderamount = $orders->pay_amount - $orderSku->pay_amount;
            $this->getModel('order')->updateOne($order->order_id, array('pay_amount' => $orderamount, 'buy_amount'=>$orderamount));
    		$this->renderJson('1', '操作成功');
        }else{
            $this->renderJson('0',$orderSku->getMessages());
        }
	}

	//创建订单
    public function createAction()
    {
        //客户ID
        $this->view->shop_id = $shop_id = $this->request->getQuery('shop_id','int',0);

        //提交订单
        if($this->request->isPost()){

            //客户ID
            $shop_id = $this->request->getPost('shop_id','int',0);
            //订单备注
            $order_remark = $this->request->getPost('order_remark','string','');
            //价格数组
            $price = $this->request->getPost('price');
            //购买数量数组
            $number = $this->request->getPost('number');
            //商品备注数组
            $remark = $this->request->getPost('remark');

            //商品列表
            $order_data  = [];
            foreach ($price as $key => $val) {
                $order_data[$key]['sku_id'] = $key;
                $order_data[$key]['buy_number'] = $number[$key];
                $order_data[$key]['user_remark'] = $remark[$key];

                //写入一客一价 
                $ykyjPrice = $this->getModel('PartnerSkuYkyj')->getYkyj($shop_id,$this->userId,$key);
                $this->createModel('PartnerSkuYkyj')->savePrice($shop_id,$this->userId,$key,$val);
            }

            //生成订单
            $is_success = $this->getModel('order')->createOrder($this->mc->getShop($shop_id)['user_id'], $shop_id, $order_data , 1, $order_remark);

            //返回数据
            if(!$is_success['error']){
                $this->renderJson($is_success);
            }else{
                $this->renderJson($is_success);
            }
        }

        //ajax查询商品
        if($this->request->isAjax()){
            $term = $this->request->getQuery('term');
            //变量初始化
            if(!empty($term)){
                //初始化
                $partnerSku = $this->getModel('partnerSku')->find(array("search_name LIKE '%".$term."%' and is_del=0 and partner_id=".$this->userId))->toArray();
                foreach ($partnerSku as $key => $value) {
                    $ykyjPrice = $this->getModel('PartnerSkuYkyj')->getYkyj($shop_id,$this->userId,$value['id']);
                    if($ykyjPrice!=false)$partnerSku[$key]['unit_price'] = $ykyjPrice;
                    $partnerSku[$key]['unit_name'] = $this->mc->getDict($value['unit_id'])['name'];
                }
            }
            $this->renderJson($partnerSku);
        }

        //客户信息
        $this->view->shopInfo = $this->mc->getShop($shop_id);

        if($shop_id>0){
            
            //是否有订单号
            $ordersn = $this->request->getQuery('ordersn','string','');

            //查询条件初始化
            $skuWhere = 'is_del = 0 and partner_id='.$this->userId.' and shop_id='.$shop_id;

            //不传订单号取最近订单号
            if(strlen($ordersn)<7){
                //最近订单号
                $lastestOrderSn = $this->getModel('orderSku')->findFirst([$skuWhere,'order'=>'ctime desc']);
                if(isset($lastestOrderSn->order_sn))$ordersn=$lastestOrderSn->order_sn;
            }
            $skuWhere .=" and order_sn='$ordersn'";
            $this->view->ordersn = $ordersn;

            //商品列表
            $this->view->sku = $this->getModel('orderSku')->find([$skuWhere,'order'=>'ctime desc','group'=>'sku_id']);
            // var_dump($this->view->sku);exit;

            //常购列表
            $this->view->alwaysList = $this->getModel('UserSku')->getList($this->mc->getShop($shop_id)['user_id'],'partner');

            $this->view->parent_id = $this->userId;

        }


        //客户列表
        $this->view->shop = $this->getModel('shopSku')->getShopListByPartnerId($this->userId);

	}

    public function updateAction()
    {
        if($this->request->isPost()){
            $order_sku_id = $this->request->getPost('id');
            $price = $this->request->getPost('price');
            $number = $this->request->getPost('number');
            $success = $this->getModel('PartnerOrderSku')->updateSku($order_sku_id, $price, $number);
            if($success){
                echo "<script>alert('修改成功');widndow.location.href=history.go(-1)</script>";
            }else{
                echo "<script>alert('修改失败');widndow.location.href=history.go(-1)</script>";
            }
        }
        $order_sku_id = $this->request->getQuery('order_sku_id');
            $order_sku = $this->getModel('PartnerOrderSku')->findById($order_sku_id);
        $this->view->order_sku = $order_sku;
    }

    public function addskuAction()
        {

            if($this->request->isPost()){
                if(!$this->request->isAjax()){
                    $this->renderJson(0, 'Method does note allow');
                }
                //客户ID
                $shop_id = $this->request->getPost('shop_id','int',0);
                //订单备注
                $orderId = $this->request->getPost('order_id');
                $order_remark = $this->request->getPost('order_remark','string','');
                //价格数组
                $price = $this->request->getPost('price');
                //购买数量数组
                $number = $this->request->getPost('number');
                //商品备注数组
                $remark = $this->request->getPost('remark');

                //商品列表
                $order_data  = [];
                foreach ($price as $key => $val) {
                    $order_data[$key]['sku_id'] = $key;
                    $order_data[$key]['buy_number'] = $number[$key];
                    $order_data[$key]['user_remark'] = $remark[$key];
                    //写入一客一价 
                    $ykyjPrice = $this->getModel('PartnerSkuYkyj')->getYkyj($shop_id,$this->userId,$key);
                    $this->createModel('PartnerSkuYkyj')->savePrice($shop_id,$this->userId,$key,$val);
                }

                $is_success = $this->getModel('orderSku')->add($this->mc->getShop($shop_id)['user_id'], $shop_id, $order_data , 1, $order_remark, $orderId, $this->currentUser['id']);        
                $this->renderJson($is_success['id'], $is_success['message']);
            }else{
                $orderId = $this->request->getQuery('order_id');
                $shopId = $this->request->getQuery('shop_id');
                $this->view->shopInfo = $this->mc->getShop($shopId);
                $this->view->order = $this->getModel('OrderSubcontract')->findById($orderId);
                $order_sku = $this->getModel('OrderSku')->find(array("order_id=".$orderId.' and is_del=0',"order"=>"id desc"))->toArray();
                $this->view->order_sku = $order_sku;
            }
            $this->view->setVar('order_id', $orderId );
            $this->view->setVar('user_id', $this->userId);
        }

    public function generateAction()
    {
        if($this->request->isAjax()){
            $user_id = $this->currentUser['id'];
            $info = $this->request->getPost('info');
            $shop_id = $this->request->getPost('shop_id');
            $remark = $this->request->getPost('remark') ? $this->request->getPost('remark') : NULL;
            $info = trim($info, '@');
            $arr = explode('@', $info);
            $order_data = array();
            foreach ($arr as $key => $value) {
                $sku = explode('|', $value);
                $sku_id = $sku[0];
                $number = $sku[1];
                $sku_type = $sku[2];
                $order_data[$key]['sku_id'] = $sku_id;
                $order_data[$key]['buy_number'] = $number;
                $order_data[$key]['sku_type'] = $sku_type;
            }
            $is_success = $this->getModel('partnerOrder')->createOrder($user_id, $shop_id, $order_data , 'partner', $remark);
            if(!$is_success['error']){
                echo 1;exit();
            }else{
                echo $is_success['error'];exit();
            }        
        }else{
            $order_id = $this->request->getQuery('id');
            $sku = $this->getModel('PartnerOrderSku');
            $sku_list = $sku->find(array('order_id='.$order_id))->toArray();
            foreach ($sku_list as $key => $value) {
                if(!empty($value['sku_type']) && $value['sku_type'] == 1){
                    $unit_price = $this->mc->getSku($value['sku_id'])['unit_price'];                    
                }else{
                    $order_sku = $this->getModel('PartnerSku')->findById($value['sku_id']);
                    $unit_price = $order_sku['unit_price'];
                }
                $sku_list[$key]['price'] = $order_sku[$key]['unit_price'] = $unit_price;
                $sku_list[$key]['total_amount'] = $value['buy_amount'];
            }
            $order = $this->getModel('partnerOrder')->findById($order_id);
            $this->view->shop_id = $order['shop_id'];
            $this->view->sku_list = $sku_list;
        }
    }

    //ajax添加商品
    public function ajaxskuAction(){
        if($this->request->isPost()){
            $sku = $this->createModel('partnerSku');
            $name = $this->request->getPost('name');
            $category_id = $this->request->getPost('category_id');
            $parent_category_id = $this->request->getPost('parent_category_id');
            $sku->name = $name;
            $sku->spec = $this->request->getPost('spec');
            $sku->remark = $this->request->getPost('remark');
            $sku->unit_id = $this->request->getPost('unit_id');
            $sku->unit_price = $this->request->getPost('unit_price');
            $sku->unit_number = $this->request->getPost('unit_number');
            $sku->measure_id = $this->request->getPost('measure_id');
            $sku->parent_category_id = $parent_category_id;
            $sku->category_id = $category_id;
            $sku->partner_id = $this->currentUser['id'];
            $sku->origin = '';
            $sku->content = '';
            $sku->hot = 0;
            $sku->new = 0;
            
            if($sku->save()) {
                $this->renderJson($sku);
            }else{
                $this->renderJson('',$sku->getError());
            }

        }
        $this->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);

        
        $this->view->setVar('measureArr',$this->getModel('dict')->find(['is_del=0 and parent_id=43','columns'=>['name','id'],'order'=>'sort asc']));
        $this->view->setVar('unitArr',$this->getModel('dict')->find(['is_del=0 and parent_id=37','columns'=>['name','id'],'order'=>'sort asc']));
        $this->view->setVar('categoryJson',$this->getModel('category')->getList($this->mc->getPartner($this->userId)['category'],true));

        $this->view->pick('partnerorder/ajaxsku');
    }

    //ajax添加客户
    public function ajaxshopAction(){

        if($this->request->isPost()){

            $name = $this->request->getPost('name');
            $mobile = $this->request->getPost('contact_mobile');
            $address = $this->request->getPost('address');
            $contact_name = $this->request->getPost('contact_name');
            $best_time = $this->request->getPost('best_time');
            $shopArr = [
                'name'=>$name,
                'address'=>$address,
                'contact_name'=>$contact_name,
                'contact_mobile'=>$mobile,
                'best_time'=>$best_time,
                'creator_id'=>$this->userId,
            ];

            $shop = $this->createModel('shop')->createShopByMobile($mobile,$shopArr,1);

            $this->renderJson($shop['id'],$shop['error']);
        }
        
        $this->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);
    }

}